{"remainingRequest":"/home/saad/appnasa/node_modules/babel-loader/lib/index.js!/home/saad/appnasa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/saad/appnasa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/saad/appnasa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/saad/appnasa/src/components/HelloWorld.vue?vue&type=template&id=469af010","dependencies":[{"path":"/home/saad/appnasa/src/components/HelloWorld.vue","mtime":1624836354773},{"path":"/home/saad/appnasa/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/saad/appnasa/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/saad/appnasa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1616796459000},{"path":"/home/saad/appnasa/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/saad/appnasa/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIjsKaW1wb3J0IHsgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gInZ1ZSI7CmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJkaXYiLCBudWxsLCBbX2NyZWF0ZVZOb2RlKCJoMSIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoJGRhdGEudGl0bGUpICsgIiBhdCAiICsgX3RvRGlzcGxheVN0cmluZygkZGF0YS5kYXRlKSwgMQogIC8qIFRFWFQgKi8KICApLCBfY3JlYXRlVk5vZGUoImltZyIsIHsKICAgIHNyYzogJGRhdGEudXJsLAogICAgYWx0OiAkZGF0YS50aXRsZQogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgWyJzcmMiLCAiYWx0Il0pLCBfY3JlYXRlVk5vZGUoInAiLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKCRkYXRhLmRlc2NyaXB0aW9uKSwgMQogIC8qIFRFWFQgKi8KICApXSk7Cn0="},{"version":3,"sources":["/home/saad/appnasa/src/components/HelloWorld.vue"],"names":[],"mappings":";;;;uBACE,YAAA,CAIM,KAJN,EAIM,IAJN,EAIM,CAHJ,YAAA,CAAkC,IAAlC,EAAkC,IAAlC,EAAkC,gBAAA,CAA3B,KAAA,CAAA,KAA2B,CAAA,GAAnB,MAAmB,GAAf,gBAAA,CAAG,KAAA,CAAA,IAAH,CAAnB,EAA0B;AAAA;AAA1B,GAGI,EAFJ,YAAA,CAA+B,KAA/B,EAA+B;AAAzB,IAAA,GAAG,EAAE,KAAA,CAAA,GAAoB;AAAd,IAAA,GAAG,EAAE,KAAA,CAAA;AAAS,GAA/B,E,IAAA,E;;AAAA,I,cAAA,CAEI,EADJ,YAAA,CAAwB,GAAxB,EAAwB,IAAxB,EAAwB,gBAAA,CAAlB,KAAA,CAAA,WAAkB,CAAxB,EAAiB;AAAA;AAAjB,GACI,CAJN,C","sourcesContent":["<template>\n  <div>\n    <h1>{{ title }} at {{ date }}</h1>\n    <img :src=\"url\" :alt=\"title\" />\n    <p>{{ description }}</p>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  name: \"HelloNasa\",\n\n  data() {\n    return {\n      date: \"2019-09-28\",\n      title: \"lorem ipsum\",\n      url: \"https://apod.nasa.gov/apod/image/2106/neonsaturnaurora_cassini_1080.jpg\",\n      description: \"\",\n    };\n  },\n\n  mounted() {\n    // axios\n    //   .get(\"https://api.cryptonator.com/api/ticker/btc-usd\")\n    //   .then((res) => {\n    //     if (res.data.success) {\n    //       this.ticker = res.data.ticker;\n    //     } else {\n    //       this.error = res.data.error;\n    //     }\n    //   })\n    //   .catch((err) => {\n    //     console.log(err);\n    //   });\n    const apiUrl =\n      \"https://api.nasa.gov/planetary/apod?api_key=vANhpstA65mOYxlGFQaU8zYGyLlhSIsUdiVItnxT\";\n    axios\n      .get(apiUrl)\n      .then((res) => {\n        // console.log(\"res\", res);\n        this.title = res.data.title;\n        this.date = res.data.date;\n        this.url = res.data.url;\n        this.description = res.data.explanation;\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\"></style>\n"],"sourceRoot":""}]}